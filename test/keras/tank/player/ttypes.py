#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class Direction(object):
    UP = 1
    DOWN = 2
    LEFT = 3
    RIGHT = 4

    _VALUES_TO_NAMES = {
        1: "UP",
        2: "DOWN",
        3: "LEFT",
        4: "RIGHT",
    }

    _NAMES_TO_VALUES = {
        "UP": 1,
        "DOWN": 2,
        "LEFT": 3,
        "RIGHT": 4,
    }


class Position(object):
    """
    Attributes:
     - x
     - y
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'x', None, None, ),  # 1
        (2, TType.I32, 'y', None, None, ),  # 2
    )

    def __init__(self, x=None, y=None,):
        self.x = x
        self.y = y

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.x = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.y = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Position')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.I32, 1)
            oprot.writeI32(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.I32, 2)
            oprot.writeI32(self.y)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Tank(object):
    """
    Attributes:
     - id
     - pos
     - dir
     - hp
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRUCT, 'pos', (Position, Position.thrift_spec), None, ),  # 2
        (3, TType.I32, 'dir', None, None, ),  # 3
        (4, TType.I32, 'hp', None, None, ),  # 4
    )

    def __init__(self, id=None, pos=None, dir=None, hp=None,):
        self.id = id
        self.pos = pos
        self.dir = dir
        self.hp = hp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.pos = Position()
                    self.pos.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.dir = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.hp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Tank')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.pos is not None:
            oprot.writeFieldBegin('pos', TType.STRUCT, 2)
            self.pos.write(oprot)
            oprot.writeFieldEnd()
        if self.dir is not None:
            oprot.writeFieldBegin('dir', TType.I32, 3)
            oprot.writeI32(self.dir)
            oprot.writeFieldEnd()
        if self.hp is not None:
            oprot.writeFieldBegin('hp', TType.I32, 4)
            oprot.writeI32(self.hp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Shell(object):
    """
    Attributes:
     - id
     - pos
     - dir
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRUCT, 'pos', (Position, Position.thrift_spec), None, ),  # 2
        (3, TType.I32, 'dir', None, None, ),  # 3
    )

    def __init__(self, id=None, pos=None, dir=None,):
        self.id = id
        self.pos = pos
        self.dir = dir

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.pos = Position()
                    self.pos.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.dir = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Shell')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.pos is not None:
            oprot.writeFieldBegin('pos', TType.STRUCT, 2)
            self.pos.write(oprot)
            oprot.writeFieldEnd()
        if self.dir is not None:
            oprot.writeFieldBegin('dir', TType.I32, 3)
            oprot.writeI32(self.dir)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GameState(object):
    """
    Attributes:
     - tanks
     - shells
     - yourFlagNo
     - enemyFlagNo
     - flagPos
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'tanks', (TType.STRUCT, (Tank, Tank.thrift_spec), False), None, ),  # 1
        (2, TType.LIST, 'shells', (TType.STRUCT, (Shell, Shell.thrift_spec), False), None, ),  # 2
        (3, TType.I32, 'yourFlagNo', None, None, ),  # 3
        (4, TType.I32, 'enemyFlagNo', None, None, ),  # 4
        (5, TType.STRUCT, 'flagPos', (Position, Position.thrift_spec), None, ),  # 5
    )

    def __init__(self, tanks=None, shells=None, yourFlagNo=None, enemyFlagNo=None, flagPos=None,):
        self.tanks = tanks
        self.shells = shells
        self.yourFlagNo = yourFlagNo
        self.enemyFlagNo = enemyFlagNo
        self.flagPos = flagPos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.tanks = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Tank()
                        _elem5.read(iprot)
                        self.tanks.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.shells = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = Shell()
                        _elem11.read(iprot)
                        self.shells.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.yourFlagNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.enemyFlagNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.flagPos = Position()
                    self.flagPos.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GameState')
        if self.tanks is not None:
            oprot.writeFieldBegin('tanks', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.tanks))
            for iter12 in self.tanks:
                iter12.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.shells is not None:
            oprot.writeFieldBegin('shells', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.shells))
            for iter13 in self.shells:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.yourFlagNo is not None:
            oprot.writeFieldBegin('yourFlagNo', TType.I32, 3)
            oprot.writeI32(self.yourFlagNo)
            oprot.writeFieldEnd()
        if self.enemyFlagNo is not None:
            oprot.writeFieldBegin('enemyFlagNo', TType.I32, 4)
            oprot.writeI32(self.enemyFlagNo)
            oprot.writeFieldEnd()
        if self.flagPos is not None:
            oprot.writeFieldBegin('flagPos', TType.STRUCT, 5)
            self.flagPos.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Order(object):
    """
    Attributes:
     - tankId: DO NOT try to send a order with competitor's tank id.
    In that case, game engine will treat it as cheat and would ignore ALL this player's orders in this round.

     - order: Possible orders are: turnTo, fire, move. All others words are illegal and will be ignored.
    If want a tank to stick around, just do NOT send any order with that tank.

     - dir: the dir are always on base of the map instead of the tank itself,
    which mean if a 'fire' order with UP direction will made the tank fire a shell toward the UP diction of the map.

    Only move order does not need a direction, in that case just give a direction and game engine will ignore it.

    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'tankId', None, None, ),  # 1
        (2, TType.STRING, 'order', 'UTF8', None, ),  # 2
        (3, TType.I32, 'dir', None, None, ),  # 3
    )

    def __init__(self, tankId=None, order=None, dir=None,):
        self.tankId = tankId
        self.order = order
        self.dir = dir

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.tankId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.order = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.dir = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Order')
        if self.tankId is not None:
            oprot.writeFieldBegin('tankId', TType.I32, 1)
            oprot.writeI32(self.tankId)
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.STRING, 2)
            oprot.writeString(self.order.encode('utf-8') if sys.version_info[0] == 2 else self.order)
            oprot.writeFieldEnd()
        if self.dir is not None:
            oprot.writeFieldBegin('dir', TType.I32, 3)
            oprot.writeI32(self.dir)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Args(object):
    """
    Attributes:
     - tankSpeed
     - shellSpeed
     - tankHP
     - tankScore
     - flagScore
     - maxRound
     - roundTimeoutInMs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'tankSpeed', None, None, ),  # 1
        (2, TType.I32, 'shellSpeed', None, None, ),  # 2
        (3, TType.I32, 'tankHP', None, None, ),  # 3
        (4, TType.I32, 'tankScore', None, None, ),  # 4
        (5, TType.I32, 'flagScore', None, None, ),  # 5
        (6, TType.I32, 'maxRound', None, None, ),  # 6
        (7, TType.I32, 'roundTimeoutInMs', None, None, ),  # 7
    )

    def __init__(self, tankSpeed=None, shellSpeed=None, tankHP=None, tankScore=None, flagScore=None, maxRound=None, roundTimeoutInMs=None,):
        self.tankSpeed = tankSpeed
        self.shellSpeed = shellSpeed
        self.tankHP = tankHP
        self.tankScore = tankScore
        self.flagScore = flagScore
        self.maxRound = maxRound
        self.roundTimeoutInMs = roundTimeoutInMs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.tankSpeed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.shellSpeed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.tankHP = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tankScore = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.flagScore = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.maxRound = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.roundTimeoutInMs = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Args')
        if self.tankSpeed is not None:
            oprot.writeFieldBegin('tankSpeed', TType.I32, 1)
            oprot.writeI32(self.tankSpeed)
            oprot.writeFieldEnd()
        if self.shellSpeed is not None:
            oprot.writeFieldBegin('shellSpeed', TType.I32, 2)
            oprot.writeI32(self.shellSpeed)
            oprot.writeFieldEnd()
        if self.tankHP is not None:
            oprot.writeFieldBegin('tankHP', TType.I32, 3)
            oprot.writeI32(self.tankHP)
            oprot.writeFieldEnd()
        if self.tankScore is not None:
            oprot.writeFieldBegin('tankScore', TType.I32, 4)
            oprot.writeI32(self.tankScore)
            oprot.writeFieldEnd()
        if self.flagScore is not None:
            oprot.writeFieldBegin('flagScore', TType.I32, 5)
            oprot.writeI32(self.flagScore)
            oprot.writeFieldEnd()
        if self.maxRound is not None:
            oprot.writeFieldBegin('maxRound', TType.I32, 6)
            oprot.writeI32(self.maxRound)
            oprot.writeFieldEnd()
        if self.roundTimeoutInMs is not None:
            oprot.writeFieldBegin('roundTimeoutInMs', TType.I32, 7)
            oprot.writeI32(self.roundTimeoutInMs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
